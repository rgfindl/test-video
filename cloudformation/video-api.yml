AWSTemplateFormatVersion: 2010-09-09
Description: The Video application - video-api template.

Parameters:
  CloudFormationLambdaArn:
    Type: String
    Description: Lambda that handle's Custom CloudFormation Resources

  VPCStack:
    Type: String
    Description: VPC Stack Name

  SharedStack:
    Type: String
    Description: Shared Stack name

  Environment:
    Description: Environment - prod or sandbox
    Type: String
    Default: prod

  GitHubOwner:
    Description: The name of the GitHub repository owner
    Type: String
    Default: WPMedia

  GitHubToken:
    Description: GitHubToken
    Type: String
    NoEcho: true

  GitHubRepo:
    Type: String
    Description: GitHub repository name
    Default: 'test-video-service2' # TODO 'Post.TV'

  CloudFormationRole:
    Type: String
    Description: CloudFormationRole

  CodePipelineRole:
    Type: String
    Description: CodePipelineRole

Resources:

  ##############################
  # ECR Repository
  ##############################

  Repository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName:
        Fn::Join:
          - ''
          - - 'video/api/'
            - Ref: Environment

  #############################
  # Logs
  ##############################

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
          - ''
          - - '/video/api/'
            - Ref: Environment
      RetentionInDays: 365

  #############################
  # Roles
  ##############################

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument:
          {
              "Statement": [{
                  "Effect": "Allow",
                  "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                  "Action": [ "sts:AssumeRole" ]
              }]
          }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
                "Version": "2012-10-17",
                "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "ec2:AuthorizeSecurityGroupIngress",
                            "ec2:Describe*",
                            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                            "elasticloadbalancing:Describe*",
                            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                            "elasticloadbalancing:DeregisterTargets",
                            "elasticloadbalancing:DescribeTargetGroups",
                            "elasticloadbalancing:DescribeTargetHealth",
                            "elasticloadbalancing:RegisterTargets"
                        ],
                        "Resource": "*"
                }]
            }
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-task-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument:
          {
              "Statement": [{
                  "Effect": "Allow",
                  "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                  "Action": [ "sts:AssumeRole" ]
              }]
          }
      Policies:
        - PolicyName: !Sub ecs-task-${AWS::StackName}
          PolicyDocument:
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": "s3:*",
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ses:*"
                        ],
                        "Resource": "*"
                    }
                ]
            }

Outputs:
  Repository:
    Value: !Ref 'Repository'
    Export:
      Name: !Sub '${AWS::StackName}-Repository'
  RepositoryUrl:
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}"
    Export:
      Name: !Sub '${AWS::StackName}-RepositoryUrl'